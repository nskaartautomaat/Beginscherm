__author__ = 'victor'
from tkinter import * #TK inter wordt geladen voor de GUI
from PIL import Image, ImageTk # PIL wordt geladen voor de plaatjes
import requests #requests wordt geladen voor het ophalen van de API
import xmltodict #wordt geladen om de voor het converteren van de API van xml naar dict
import time #time wordt geladen voor het weergeven van de tijd in het programma


class Beginscherm:  #de klassen die als eersts wordt gelden(het startscherm)

    def __init__(self,master):
        window.configure(bg="#fdcf19") #start van de Klassen beginscherm en stelt het tk window in
        window.geometry("1366x768")

        global MainFrame
        MainFrame = Frame(master,bg="#fdcf19",height=720) #maakt het hoofd frame van de code en paats deze
        MainFrame.pack(side=TOP,fill=X)

        global BotFrame
        BotFrame =Frame(master,bg="#01236A",height=50) #maakt de frame aan de onderkant
        BotFrame.pack(side=BOTTOM,fill=X)

        self.LabWelkom = Label(MainFrame,text="Welkom bij NS",fg="#01236A",bg="#fdcf19",font=("arial", 33))
        self.LabWelkom.place(relx=0.5, rely=0.5,y=-250, anchor=CENTER) #maakt label aan "Welkom bij NS"

        self.LabPhoto1= Label(MainFrame,image=photo1,bg="#fdcf19") #maakt label aan met daarin het plaatje van de OV
        self.LabPhoto1.place(relx=0.5, rely=0.5,y=-100, anchor=CENTER)

        self.LabPhoto2= Label (BotFrame,image=photo2,bg="#01236A") #maakt een label aan met daarin het plaatje van de taal en betaalopties
        self.LabPhoto2.place(relx=0.5, rely=0.5,y=5,anchor=E)


        self.ButKaartje= Button(MainFrame,text="Kopen \nlos kaartje",fg="white",bg="#01236A",width=19,height=3,command=self.bNiet, font=("arial",15)) #maakt een button aan die verwijst naar "Los kaartje kopen"
        self.ButKaartje.place(relx=0.5, rely=0.5,y=109,x=-350, anchor=CENTER)

        self.ButOV= Button(MainFrame,text="Kopen \nOV-chipkaart",fg="white",bg="#01236A",width=19,height=3,command=self.bNiet, font=("arial",15)) #maakt een button aan die vewrijst naar"OVkaart kopen
        self.ButOV.place(relx=0.5, rely=0.5,y=109,x=-120, anchor=CENTER)

        self.ButBuitenland= Button(MainFrame,text="Ik wil naar \nhet buitenland",fg="white",bg="#01236A",command=self.bNiet,width=19,height=3, font=("arial",15)) #maakt een button aan die verwijst naar "ik wil naar het buitenland"
        self.ButBuitenland.place(relx=0.5, rely=0.5,y=109,x=110, anchor=CENTER)

        self.ButReisinfo= Button(MainFrame,text="Actuele \nreisinformatie",fg="white",bg="#01236A",command=self.bReisInformatie,width=19,height=3, font=("arial",15)) #maakt een button aan die verwijst naar de reisinformatie
        self.ButReisinfo.place(relx=0.5, rely=0.5,y=109,x=340, anchor=CENTER)




    def bReisInformatie(self): #functie voor "ButReisInfo" die de volgende classen start
        MainFrame.destroy()
        BotFrame.destroy()
        Treinen(window)

    def bNiet(self): #functie voor de overige buttons die een calssen laadt
        MainFrame.destroy()
        BotFrame.destroy()
        nietVoorOnzeOpdracht(window)


class Treinen: #klassen van de actuele reis informatie voor het stataion Utrecht Centraal

    def __init__(self,master):

        global response
        response = requests.get(url, auth=(user, passw))#haalt het XML bestand via de API op
        global xmldi
        xmldi = xmltodict.parse(response.text) #zet het XML bestand in een dictionary
        global frame2
        frame2= Frame(master,bg="#fdcf19") #maakt het frame voor de reistijden aan
        frame2.pack(side=TOP,fill=X)


        tijd = time.strftime("%H:%M") #slaat de huidige tijd van het hostsysteem op in een variabelen

        #Labels voor de koptekst: de tijd, Naar, Spoor, routetekst als via, vervoerder, ritnummer en de treinsoort
        self.labeltijd = Label(frame2, anchor='w',text='Tijd',fg="#003399",bg="#fdcf19", width=5).grid(row=0,column=0)
        self.LabelVertraging = Label(frame2, anchor='w',text='',fg="#003399",bg="#fdcf19", width=4).grid(row=0,column=1)
        self.labelnaar = Label(frame2, anchor='w',text='Naar', fg="#003399",bg="#fdcf19", width=25).grid(row=0,column=2)
        self.labelvertrekspoor = Label(frame2,anchor='w',text='Spoor', fg="#003399",bg="#fdcf19", width=12).grid(row=0,column=3)
        self.labelroutetekst = Label(frame2,anchor='w',text='Via', fg="#003399",bg="#fdcf19", width=60).grid(row=0,column=4)
        self.labelvervoerder = Label(frame2,anchor='w',text='Vervoerder', fg="#003399",bg="#fdcf19", width=18).grid(row=0,column=5)
        self.labelritnummer = Label(frame2,anchor='w',text='Ritnummer', fg="#003399",bg="#fdcf19", width=15).grid(row=0,column=6)
        self.labeltreinsoort = Label(frame2,anchor='w',text='Treinsoort', fg="#003399",bg="#fdcf19", width=15).grid(row=0,column=7)

        for hoeveelstetrein in range(0, aantaltreinen):
            #een if statement om de verschillende rijen een andere kleur te geven
            #de even en oneven getallen krijgen andere kleuren
            if hoeveelstetrein % 2 == 0:
                kleur = "#003399"
            else:
                kleur = "#0000ff"


            #Hier wordt de tekst die we nodig hebben uit de dictionary als Label opgeslagen
            self.tijd = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['VertrekTijd'][11:16]
            self.Naar = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['EindBestemming']
            self.Ritnummer = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['RitNummer']
            self.Treinsoort = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['TreinSoort']
            self.Vertrekspoor = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['VertrekSpoor']['#text']


            #Hier worden try excepts voor KeyErrors gegeven omdat deze waarden niet altijd in de API staan
            try:
                self.Vervoerder = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['Vervoerder']
            except KeyError:
                self.Vervoerder = ''
            try:
                self.Vertraging = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['VertrekVertragingTekst'][0:3]
            except KeyError:
                self.Vertraging = ''

            try:
                self.Via = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['RouteTekst']
            except KeyError:
                self.Via = ''

            try:
                self.Routetekst = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['RouteTekst']
            except KeyError:
                self.Routetekst = ''

            #Hier wordt de rij waar de tekst moet worden geplaatst weergegeven
            #je begint bij rij 1 omdat op rij 0 de koptekst staat
            rij= hoeveelstetrein+1

            self.labeltijdAPI = Label(frame2,anchor='w',text=self.tijd,fg="white",bg=kleur, width=5).grid(row=rij,column=0)
            self.labelVertraging = Label(frame2,anchor='w',text=self.Vertraging,fg="red",bg=kleur, width=4).grid(row=rij,column=1)
            self.labelnaarAPI = Label(frame2,anchor='w',text=self.Naar, fg="white",bg=kleur, width=25).grid(row=rij,column=2)
            self.labelvertrekspoorAPI = Label(frame2,anchor='w',text=self.Vertrekspoor, fg="white",bg=kleur, width=12).grid(row=rij,column=3)
            self.labelroutetekstAPI = Label(frame2,anchor='w',text=self.Routetekst, fg="white",bg=kleur, width=60).grid(row=rij,column=4)
            self.labelvervoerderAPI = Label(frame2,anchor='w',text=self.Vervoerder, fg="white",bg=kleur, width=18).grid(row=rij,column=5)
            self.labelritnummerAPI = Label(frame2,anchor='w',text=self.Ritnummer, fg="white",bg=kleur, width=15).grid(row=rij,column=6)
            self.labeltreinsoortAPI = Label(frame2,anchor='w',text=self.Treinsoort, fg="white",bg=kleur, width=15).grid(row=rij,column=7)

            #dit zijn de labels knoppen en tijd
            self.labVensterRechts = Label(text="",bg="#01236A",height=691).place(relx=0.5, rely=0.5,y=-384,x=445)
            self.labelCurTime = Label(text=tijd,fg="#01236A",bg="#fdcf19",font=("arial",25)).place (relx=0.5, rely=0.5,y=-350,x=515)
            self.buttonMeerResultaten = Button(text='Meer \n treinen', state=NORMAL, fg="white",bg="#01236A",width=19,height=3, font=("arial",15), command=self.meerResult).place(relx=0.5, rely=0.5,y=-280,x=455)
            self.buttonRefresh = Button(text='Refresh', fg="white",bg="#01236A",width=19,height=3,font=("arial",15),command=self.refresh).place(relx=0.5, rely=0.5,y=-190,x=455)

            #Dit is het invoerveld en de knop voor het zoeken van een ander station
            #Dit invoerveld en de button zijn disabled omdat ze in deze code niet werken
            #De code werkt los van deze applicatie wel
            self.labAnderStation = Label(text="ander station:", bg="#fdcf19", font=("Arial",10)).place(relx=0.5, rely=0.5,y=-100,x=455)
            global entyAnderStation
            entyAnderStation = Entry(master,state=DISABLED)
            entyAnderStation.insert(0,"NIET ACTIEF")
            entyAnderStation.place(relx=0.5, rely=0.5,y=-100,x=540)
            self.butAnderStation = Button(state=DISABLED,text="NIET ACTIEF",fg="white",bg="#01236A",font=("arial",10)).place(relx=0.5, rely=0.5,y=-80,x=540)

            self.ButStoringen = Button(text="Storingen",fg="white",bg="#01236A",width=19,height=3,command=self.bStoring, font=("arial",15)).place(relx=0.5, rely=0.5,y=-45,x=455)

            self.buttonTerug = Button(text='Terug', fg="white",bg="#01236A",width=19,height=3, command = self.terug,font=("arial",15)).place(relx=0.5, rely=0.5,y=45,x=455)


    #Dit is de functie voor de knop meer resultaten
    #hier wordt bijna hetzelfde gedaan als bij het begin van de klasse treinen
    #namenlijk weer het ophalen van de juiste gegevens uit de dictionary en meegeven van een kleur
    def meerResult(self): #voegt meer reistijden toe aan het aan de actuele reistijden
        global extra_treinen
        global aantaltreinen
        for hoeveelstetrein in range(aantaltreinen, aantaltreinen+6):
            if hoeveelstetrein % 2 == 0:
                kleur = "#003399"
            else:
                kleur = "#0000ff"

            self.tijd = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['VertrekTijd'][11:16]
            self.Naar = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['EindBestemming']
            self.Ritnummer = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['RitNummer']
            self.Treinsoort = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['TreinSoort']
            self.Vertrekspoor = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['VertrekSpoor']['#text']

            try:
                self.Vervoerder = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['Vervoerder']
            except KeyError:
                self.Vervoerder = ''
            try:
                self.Vertraging = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['VertrekVertragingTekst'][0:2]
            except KeyError:
                self.Vertraging = ''

            try:
                self.Via = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['RouteTekst']
            except KeyError:
                self.Via = ''

            try:
                self.Routetekst = xmldi['ActueleVertrekTijden']['VertrekkendeTrein'][hoeveelstetrein]['RouteTekst']
            except KeyError:
                self.Routetekst = ''

            rij= hoeveelstetrein+1

            self.labeltijdAPI = Label(frame2,anchor='w',text=self.tijd,fg="white",bg=kleur, width=5).grid(row=rij,column=0)
            self.labelVertraging = Label(frame2,anchor='w',text=self.Vertraging,fg="red",bg=kleur, width=4).grid(row=rij,column=1)
            self.labelnaarAPI = Label(frame2,anchor='w',text=self.Naar, fg="white",bg=kleur, width=25).grid(row=rij,column=2)
            self.labelvertrekspoorAPI = Label(frame2,anchor='w',text=self.Vertrekspoor, fg="white",bg=kleur, width=12).grid(row=rij,column=3)
            self.labelroutetekstAPI = Label(frame2,anchor='w',text=self.Routetekst, fg="white",bg=kleur, width=60).grid(row=rij,column=4)
            self.labelvervoerderAPI = Label(frame2,anchor='w',text=self.Vervoerder, fg="white",bg=kleur, width=18).grid(row=rij,column=5)
            self.labelritnummerAPI = Label(frame2,anchor='w',text=self.Ritnummer, fg="white",bg=kleur, width=15).grid(row=rij,column=6)
            self.labeltreinsoortAPI = Label(frame2,anchor='w',text=self.Treinsoort, fg="white",bg=kleur, width=15).grid(row=rij,column=7)
        
        #hier zet hij het aantal treinen 6 hoger omdat je 6 treinen toevoegt, dan begint hij als je nog meer treinen toe wil voegen bij een waarde meer dan 6
        aantaltreinen +=6
        #extra treinen staat standaard op 0 en wordt als je op de button extra treinen drukt 1 hoger
        extra_treinen +=1

        #we wilden dat je maximaal 2x extra treinen kon toevoegen, dus is hier een statement gemaakt die bij extra_treinen==2 de button disabled
        if extra_treinen == 2:
            self.buttonMeerResultaten = Button(text='Meer \n treinen', state=DISABLED, fg="white",bg="#01236A",width=19,height=3, font=("arial",15), command=self.meerResult).place(relx=0.5, rely=0.5,y=-280,x=455)


    #functie voor het verversen van de treinen en tijd
    def refresh(self): #refreshed de actuele vertrektijden
        frame2.destroy()
        global extra_treinen
        global aantaltreinen
        aantaltreinen = 16
        extra_treinen=0
        Treinen(window)

    def terug(self): #gaat terug naar het beginscherm
        global aantaltreinen
        global extra_treinen
        aantaltreinen = 16
        frame2.destroy()
        Beginscherm(window)
        extra_treinen = 0

    def bStoring(self): #opent de Klassen 
        frame2.destroy()
        Storingen(window)


class nietVoorOnzeOpdracht: # laat een plaatje zien bij de knoppen die niet voor ons project bedoeld zijn.
    def __init__(self,master):

        global frame4
        frame4 = Frame(master, bg="#fdcf19", height=768)
        frame4.pack(side=TOP, fill=X)

        self.NotMyJob= Label(frame4,image=nietOnzeOpdr,bg="#fdcf19")
        self.NotMyJob.place(relx=0.5, rely=0.5,y=-100, anchor=CENTER)

        self.nietOnzeOpdr = Label(frame4,text='Dit onderdeel behoord niet tot ons project', fg="#01236A", bg="#fdcf19",font=("arial",20))
        self.nietOnzeOpdr.place(anchor=CENTER,relx=0.5, rely=0.5,x=-200,y=240)

        self.buttonTerug = Button(frame4,text='Terug', fg="white",bg="#01236A",width=19,height=3,command=self.terug2,font=("arial",15)).place(anchor=CENTER,relx=0.5, rely=0.5,x=250, y=240)

    def terug2(self): # gaat terug naar het beginscherm
        frame4.destroy()
        Beginscherm(window)


class Storingen: # start de klasse storingen

    def __init__(self,master):

        global FStoringen
        FStoringen = Frame(master,bg="#fdcf19",height = 720)
        FStoringen.pack(side=TOP, fill=X)
        xmldiS = xmltodict.parse(responseStoring.text)
        #Ze worden in een frame gezet met de stukje code hierboven.

        self.labelstoringen = Label(FStoringen, anchor='w',text='Storingen',font=("ariel",18),fg="#003399",bg="#fdcf19", width=8).place(relx=0.5, rely=0.5,y=-360,x=-680)
        self.terugbutton = Button(FStoringen, text="terug",fg="white",bg="#01236A",width=19,height=3,font=("arial",15), command=self.terugBStoringen).place(relx=0.5, rely=0.5,y=-355,x=455)
        self.labVensterRechts = Label(FStoringen, text="",bg="#01236A",height=691).place(relx=0.5, rely=0.5,y=-384,x=445)
        self.labelleeg = Label(FStoringen, bg="#fdcf19",width=100, height=600).place(relx=0.5, rely=0.5,y=-280,x=455)
        #Dit zijn labels en buttons die in de scherm storingen moeten verschijnen. Er staat ook in wat er moet staan, hoe die er uit moet zien en waar die moet staam.

        for storing in range(0, allestoringen):#deze for-loop verzorgt dat hij meerdere keren de code doorloopt zodat er als er meer dan 1 Ongeplande storing is dat die het wel ophaalt uit de api.
            self.id1 =''
            self.test = 0
            #Dit is om id1 en test een naam te geven,zodat ze hierna gebruikt kunnen worden in een if statement.

            self.ywaarde = -330
            #Dit is de begin waarde van ywaarde, zodat alle y cordinaties die hier na komen er op gebaseerd worden.

            self.labelongepland = Label(FStoringen, anchor='w',text='Ongeplande storingen',font=("ariel",11),fg="ghost white",bg="#01236A", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)




            try:  # Ik gebruik hier een try catch voor id1, zodat er geen error code komt als er iets veranderd aan de api.
                self.id1 = xmldiS['Storingen']['Ongepland']['Storing']['id']
                self.test = 1
            except IndexError:
                self.id1=''
            except KeyError:
                self.id1= ''
            except TypeError:
                self.id1=''


            if self.id1 == '':
                try: # Ik gebruik hier een try catch voor id1, zodat er geen error code komt als er iets veranderd aan de api.
                    self.id1 = xmldiS['Storingen']['Ongepland']['Storing'][storing]['id']
                    self.test = 2
                except IndexError:
                    print()
                except KeyError:
                    print()
                except TypeError:
                    print()

            if self.test == 2: # Hier zit een if statment, zodat ze de goede code gebruiken om informatie van api te halen
                               # want als er is een verschil in code als er meer dan 1 storingen zijn.
                self.traject1 = xmldiS['Storingen']['Ongepland']['Storing'][storing]['Traject']
                self.reden1 = xmldiS['Storingen']['Ongepland']['Storing'][storing]['Reden']
                self.bericht1 = xmldiS['Storingen']['Ongepland']['Storing'][storing]['Bericht']
                self.datum1 = xmldiS['Storingen']['Ongepland']["Storing"][storing]['Datum']
                # Deze code verzorgt dat we de juist informatie uit die dictonary halen in die api.

                self.ywaarde +=20
                self.labelidongepland = Label(FStoringen, anchor='w',text='id:     '+self.id1,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y =self.ywaarde,x=-680)
                self.ywaarde +=20
                self.labeltrajectongepland = Label(FStoringen, anchor='w',text='traject:       '+self.traject1,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde +=20
                self.labelredenongepland = Label(FStoringen, anchor='w',text='reden:     '+self.reden1 ,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde +=20
                self.labelberichtongepland = Label(FStoringen, anchor='w',text='bericht:     '+self.bericht1,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde +=20
                self.labeldatumongepland = Label(FStoringen, anchor='w',text='datum:     '+self.datum1,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                # Alle ywaarde +20 zijn bedoelt om de labels op de goede locatie te doen zodat ze niet overelkaar staan.
                #Dit zijn labels en buttons die in de scherm storingen moeten verschijnen. Er staat ook in wat er moet staan, hoe die er uit moet zien en waar die moet staam.



            elif self.test == 1:# Hier zit een if statment, zodat ze de goede code gebruiken om informatie van api te halen
                                # want als er is een verschil in code als er meer dan 1 storingen zijn.
                self.traject1 = xmldiS['Storingen']['Ongepland']['Storing']['Traject']
                self.reden1 = xmldiS['Storingen']['Ongepland']['Storing']['Reden']
                self.bericht1 = xmldiS['Storingen']['Ongepland']['Storing']['Bericht']
                self.datum1 = xmldiS['Storingen']['Ongepland']["Storing"]['Datum']
                # Deze code verzorgt dat we de juist informatie uit die dictonary halen in die api.

                self.ywaarde +=20
                self.labelidongepland = Label(FStoringen, anchor='w',text='id:  '+self.id1,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y =self.ywaarde,x=-680)
                self.ywaarde +=20
                self.labeltrajectongepland = Label(FStoringen, anchor='w',text='traject:      '+self.traject1,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde +=20
                self.labelredenongepland = Label(FStoringen, anchor='w',text='reden:     '+self.reden1 ,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde +=20
                self.labelberichtongepland = Label(FStoringen, anchor='w',text='bericht:     '+self.bericht1,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde +=20
                self.labeldatumongepland = Label(FStoringen, anchor='w',text='datum:     '+self.datum1,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                # Alle ywaarde +20 zijn bedoelt om de labels op de goede locatie te doen zodat ze niet overelkaar staan.
                #Dit zijn labels en buttons die in de scherm storingen moeten verschijnen. Er staat ook in wat er moet staan, hoe die er uit moet zien en waar die moet staam.

            else:
                self.ywaarde +=20
                self.labelgeenonstoring = Label(FStoringen, anchor='w',text='Er zijn op dit moment geen ongeplande storingen',font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                # Deze label is er voor als er een geen storing is.



        for storing in range(0, allestoringen):
            self.id2 =''
            self.test2 = 0
            #Dit is om id2 en test2 een naam te geven,zodat ze hierna gebruikt kunnen worden in een if statement.

            self.ywaarde +=40


            self.labelgepland = Label(FStoringen, anchor='w',text='Geplande storingen',font=("ariel",11),fg='ghost white',bg='#01236A', width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)

            try:# Ik gebruik hier een try catch voor id1, zodat er geen error code komt als er iets veranderd aan de api.
                self.id2 = xmldiS['Storingen']['Gepland']['Storing']['id']
                self.test2 = 1
            except IndexError:
                self.id2= ''
            except KeyError:
                self.id2=''
            except TypeError:
                self.id2=''


            if self.id2 == '':
                try:# Ik gebruik hier een try catch voor id1, zodat er geen error code komt als er iets veranderd aan de api.
                    self.id2 = xmldiS['Storingen']['Gepland']['Storing'][storing]['id']
                    self.test2 = 2
                except IndexError:
                    print()
                except KeyError:
                    print()
                except TypeError:
                    print()

            try:# Ik gebruik hier een try catch voor id1, zodat er geen error code komt als er iets veranderd aan de api.
                self.id2 = xmldiS['Storingen']['Gepland']['Storing']['id'] or xmldiS['Storingen']['Gepland']['Storing'][storing]['id']
            except IndexError:
                print()
            except KeyError:
                print()
            except TypeError:
                print()

            if self.test2 == 2:# Hier zit een if statment, zodat ze de goede code gebruiken om informatie van api te halen
                               # want als er is een verschil in code als er meer dan 1 storingen zijn.
                self.traject2 = xmldiS['Storingen']['Gepland']['Storing'][storing]['Traject']
                self.periode2 = xmldiS['Storingen']['Gepland']['Storing'][storing]['Periode']
                self.advies2 = xmldiS['Storingen']['Gepland']['Storing'][storing]['Advies']
                self.oorzaak2 = xmldiS['Storingen']['Gepland']['Storing'][storing]['Oorzaak']
                self.vertraging2 = xmldiS['Storingen']['Gepland']['Storing'][storing]['Vertraging']
                # Deze code verzorgt dat we de juist informatie uit die dictonary halen in die api.

                self.ywaarde +=20
                self.labelidgepland = Label(FStoringen, anchor='w',text='id:             '+self.id2,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde += 20
                self.labeltrajectgepland = Label(FStoringen, anchor='w',text='traject:     '+self.traject2,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde += 20
                self.labelperiodegepland = Label(FStoringen, anchor='w',text='periode:    '+self.periode2,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=-self.ywaarde,x=-680)
                self.ywaarde += 20

                adviesDeel1 = self.advies2[0:140]
                adviesDeel2 = self.advies2[140:280]
                adviesDeel2MetEnter = adviesDeel2.replace(" ", "\n",1)
                adviesDeel3 = self.advies2[280:420]
                adviesDeel3MetEnter = adviesDeel3.replace(" ", "\n",1)
                adviesDeel4 = self.advies2[420:560]
                adviesDeel4MetEnter = adviesDeel4.replace(" ", "\n",1)
                self.uiteindelijkeAdvies2 = adviesDeel1 + adviesDeel2MetEnter + adviesDeel3MetEnter + adviesDeel4MetEnter
                # Deze stuk met code is bedoelt om te verzorgen dat de tekst van advies niet te lang op 1 regel door gaat, omdat advies best lang is.

                self.labeladviesgepland = Label(FStoringen, fanchor='w',text='advies:        '+self.advies2[0:],font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde +=56
                self.labeloorzaakgepland = Label(FStoringen, anchor='w',text='oorzaak:        '+self.oorzaak2,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde += 20
                self.labelvertraginggepland = Label(FStoringen, anchor='w',text='vertraging:    '+self.vertraging2,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                # Alle ywaarde +20 zijn bedoelt om de labels op de goede locatie te doen zodat ze niet overelkaar staan.
                #Dit zijn labels en buttons die in de scherm storingen moeten verschijnen. Er staat ook in wat er moet staan, hoe die er uit moet zien en waar die moet staam.

            elif self.test2 == 1:# Hier zit een if statment, zodat ze de goede code gebruiken om informatie van api te halen
                                 # want als er is een verschil in code als er meer dan 1 storingen zijn.
                self.traject2 = xmldiS['Storingen']['Gepland']['Storing']['Traject']
                self.periode2 = xmldiS['Storingen']['Gepland']['Storing']['Periode']
                self.advies2 = xmldiS['Storingen']['Gepland']['Storing']['Advies']
                self.oorzaak2 = xmldiS['Storingen']['Gepland']['Storing']['Oorzaak']
                self.vertraging2 = xmldiS['Storingen']['Gepland']['Storing']['Vertraging']
                # Deze code verzorgt dat we de juist informatie uit die dictonary halen in die api.

                self.ywaarde +=20
                self.labelidgepland = Label(FStoringen, anchor='w',text='id:                '+self.id2,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde +=20
                self.labeltrajectgepland = Label(FStoringen, anchor='w',text='traject:         '+self.traject2,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde +=20
                self.labelperiodegepland = Label(FStoringen, anchor='w',text='periode:       '+self.periode2,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde +=20
                # Alle ywaarde +20 zijn bedoelt om de labels op de goede locatie te doen zodat ze niet overelkaar staan.
                # Dit zijn labels en buttons die in de scherm storingen moeten verschijnen. Er staat ook in wat er moet staan, hoe die er uit moet zien en waar die moet staam.


                adviesDeel1 = self.advies2[0:140]
                adviesDeel2 = self.advies2[140:280]
                adviesDeel2MetEnter = adviesDeel2.replace(" ", "\n",1)
                adviesDeel3 = self.advies2[280:420]
                adviesDeel3MetEnter = adviesDeel3.replace(" ", "\n",1)
                adviesDeel4 = self.advies2[420:560]
                adviesDeel4MetEnter = adviesDeel4.replace(" ", "\n",1)
                self.uiteindelijkeAdvies2 = adviesDeel1 + adviesDeel2MetEnter + adviesDeel3MetEnter + adviesDeel4MetEnter
                # Deze stuk met code is bedoelt om te verzorgen dat de tekst van advies niet te lang op 1 regel door gaat, omdat advies best lang is.


                self.labeladviesgepland = Label(FStoringen, anchor='w',text='advies:         '+self.uiteindelijkeAdvies2,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde +=56
                self.labeloorzaakgepland = Label(FStoringen, anchor='w',text='oorzaak:      '+self.oorzaak2,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                self.ywaarde +=20
                self.labelvertraginggepland = Label(FStoringen, anchor='w',text='vertraging:    '+self.vertraging2,font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                # Alle ywaarde +20 zijn bedoelt om de labels op de goede locatie te doen zodat ze niet overelkaar staan.
                # Dit zijn labels en buttons die in de scherm storingen moeten verschijnen. Er staat ook in wat er moet staan, hoe die er uit moet zien en waar die moet staam.

            else:
                self.ywaarde +=20
                self.labelgeenstoring = Label(FStoringen, anchor='w',text='Er zijn op dit moment geen geplande storingen',font=("ariel",11),fg="ghost white",bg="#0000ff", width=124).place(relx=0.5, rely=0.5,y=self.ywaarde,x=-680)
                # Deze label is er voor als er een geen storing is.


    def terugBStoringen(self):
        global FStoringen
        FStoringen.destroy()
        Treinen(window)
    # Deze def is bedoelt om de screen weg te halen zodat hij niet voor een andere screen blijft staan


try:
    window= Tk()
    standaardStation = 'Utrecht+Centraal'
    url = 'http://webservices.ns.nl/ns-api-avt?station='+standaardStation
    user = 'dennis-strik@hotmail.com'
    passw = 'Bmz5NUzoLz3GLtbRrbwIznZUdHs_5pqL5Yv-6dMrW5V_lknjcVqStg'

    urlStoring = 'http://webservices.ns.nl/ns-api-storingen?station=Utrecht+Centraal'

    responseStoring = requests.get(urlStoring, auth=(user, passw))

    hoeveelstetrein = 0
    aantaltreinen = 16
    extra_treinen = 0
    storing = 0
    allestoringen = 1
    werkende_link = True


    photo1 = ImageTk.PhotoImage(Image.open ("ovkaart.jpg"))
    photo2 = ImageTk.PhotoImage(Image.open ("taalenopties.jpg")) # dit zij de plaatjes die zijn toegevoegd in het programma
    nietOnzeOpdr = ImageTk.PhotoImage(Image.open("NotMyJob.jpg"))

    Beginscherm(window) # start beginschem 


    window.mainloop()
except SyntaxError as error_info:
    print("er gaat wat fout",error_info)
